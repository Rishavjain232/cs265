#include <stdio.h> 
#include <stdlib.h>
#include <assert.h> 
#include <unistd.h>  
#include "lsm.h"

///////////////////////////////////////////////////////////////////////////////
//                                  LSM                                      //
///////////////////////////////////////////////////////////////////////////////

lsm_tree *lsm_init(void) {
	lsm_tree *tree;
	tree = malloc(sizeof(lsm_tree));
	if (!tree) {
		perror("Initial tree malloc failed");
		return  NULL;
	}

	tree->capacity =  BLOCKSIZE;
	tree->curr_size = 0; 
	tree->block = malloc(sizeof(node*) * BLOCKSIZE);
	tree->num_written = 0;
	tree->is_sorted = 0;
	if (!tree->block) 
		perror("Initial block malloc failed");
	return tree;
}

void lsm_destroy(lsm_tree *tree) { 
	free(tree->block); 
	free(tree);
}

///////////////////////////////////////////////////////////////////////////////
//                                  PUT                                      //
///////////////////////////////////////////////////////////////////////////////

int put(int key, int value, lsm_tree *tree) {
	int result;
	//check if block is full 
	node newnode; 
	newnode.key = key; 
	newnode.val = value;

	if (tree->capacity == tree->curr_size) {
		// push 
		result = push_to_disk(tree);
		if (result != 0) {
			perror("Push to disk failed");
			return -1;
		}
	}

	// insert into level 1
	tree->block[tree->curr_size] = newnode;

	tree->curr_size++; 
	tree->is_sorted = 0;
	return 0;

}

int comparison(const void *a, const void *b) {
	node *aa = (node *) a; 
	node *bb = (node *) b; 
	return (aa->key - bb->key);
}

int push_to_disk(lsm_tree *tree) { 
	int count = tree->curr_size; 
	//[KZ] qsort(tree->block, count, sizeof(node) * count, comparison);
	tree->is_sorted = 1;

	//[KZ] node *all_data_buffer = NULL;
	node *disk_buffer = NULL;
	FILE *file = NULL;
	int result = 0;

	// file exists
	if (access("disk.txt", F_OK) != -1) {
		//[KZ] count = tree->num_written;
		file = fopen("disk.txt", "r");

		disk_buffer = malloc(count * sizeof(node)); 
		if (!disk_buffer) {
			fclose(file); 
			perror("Disk buffer malloc failed");
			return -1;
		}

		result = fread(disk_buffer, sizeof(node), count, file); 
		if (result == 0) {
			fclose(file); 
			perror("Read into buffer failed");
			return -1;
		}

		/*[KZ] 
		all_data_buffer = malloc(sizeof(node) * (count + tree->curr_size));
		if (!all_data_buffer) {
			fclose(file); 
			perror("All data buffer malloc failed");
			return -1;
		}*/

		//[KZ] merge_data(all_data_buffer, disk_buffer, tree->block, count, tree->curr_size);
		free(disk_buffer);

		//[KZ] count += tree->curr_size;

		result = fclose(file); 
		if (result) {
			perror("file close failed 1"); 
			return -1;
		}
	}
	// file DNE 
	file = fopen("disk.txt", "w");  
	/*if (! all_data_buffer) {
		all_data_buffer = tree->block;
	}
	result = fwrite(all_data_buffer, sizeof(node), count, file);
	if (!result) {
		fclose(file); 
		perror("fwrite failed while writing to disk 1");
		return -1;
	}*/

	// [KZ]
	result = fwrite(disk_buffer, sizeof(node), tree->num_written, file);
	result = fwrite(tree->block, sizeof(node), tree->curr_size, file);
	// [KZ]


	result = fclose(file); 
	if (result) {
		fclose(file); 
		perror("file close failed 2"); 
		return -1;
	}
	tree->num_written += count;
	tree->curr_size = 0; 
	//[KZ] free(all_data_buffer); 
	return 0; 
}

// merge two buffers
// merge sort inspired by (http://www.thecrazyprogrammer.com/2014/03/c-program-for-implementation-of-merge-sort.html)
void merge_data(node *buf, node *left, node *right, int sz1, int sz2) {
	int i = 0;
	int j = 0; 
	int k = 0;
	while (i < sz1 && j < sz2) {
		if (left[i].key < right[j].key)
			buf[k++] = left[i++];
		else 
			buf[k++] = right[j++]; 
	}
	while (i < sz1) 
		buf[k++] = left[i++];
	while (j < sz2) 
		buf[k++] = right[j++];
}

///////////////////////////////////////////////////////////////////////////////
//                                  GET                                      //
///////////////////////////////////////////////////////////////////////////////

int get(int key, lsm_tree *tree) {
	printf("---> GET: %d\n", key);

	// bloom filter???
	// better to sort before getting????
	int result; 

	for (int i = 0; i < tree->curr_size; i++) {
		printf("[MEMORY] %d\n", tree->block[i].key);
			
		if (key == tree->block[i].key) {
			printf("%d\n", tree->block[i].val);
			return 0;
		}
	}
	// perhaps on disk!
	if (access("disk.txt", F_OK) != -1) {
		FILE *file = fopen("disk.txt", "r"); 
		if (!file) {
			perror("file open in get failed");
			return -1;
		}

		node *disk_buffer = malloc(tree->num_written * sizeof(node)); 
		if (!disk_buffer) {
			perror("Disk buffer malloc failed");
			fclose(file);
			return -1;
		}

		result = fread(disk_buffer, sizeof(node), tree->num_written, file); 	

		for (int i = 0; i < tree->num_written; i++){
			printf("[DISK] %d\n", disk_buffer[i].key);
			if (key == disk_buffer[i].key) {
				printf("%d\n", disk_buffer[i].val);
				result = fclose(file);
				if (result) {
					perror("File close failed in get");
					return -1;
				}
				return 0;
			}
		}
		fclose(file); 

	} 
	// not found
	printf("\n");
	return -1;
}

///////////////////////////////////////////////////////////////////////////////
//                                RANGE                                      //
///////////////////////////////////////////////////////////////////////////////

void range(int key1, int key2, lsm_tree *tree){
	int none_found = 1;
	for (int i = 0; i < tree->curr_size; i ++) {
		if (key1 <= tree->block[i].key && tree->block[i].key < key2) {
			none_found = 0;
			printf("%d:%d\n", tree->block[i].key, tree->block[i].val);
		}
	}
	if (none_found)
		printf("\n");
}


///////////////////////////////////////////////////////////////////////////////
//                                DELETE                                     //
///////////////////////////////////////////////////////////////////////////////

int delete(int key, lsm_tree *tree) {
	// in memory
	for (int i = 0; i < tree->curr_size; i ++) {
		if (key == tree->block[i].key) {
			tree->block[i] = tree->block[tree->curr_size - 1];
			tree->curr_size--;
			tree->is_sorted = 0;
			return 0;
		}
	}
	// on disk
	if (access("disk.txt", F_OK) != -1) {
		FILE *file = fopen("disk.txt", "r"); 
		int result; 

		node *disk_buffer = malloc(tree->num_written * sizeof(node)); 
		if (!disk_buffer) {
			fclose(file); 
			perror("Disk buffer malloc failed");
			return -1;
		}

		result = fread(disk_buffer, sizeof(node), tree->num_written, file); 
		if (result == 0) {
			fclose(file); 
			perror("fread failed while deleting");
			return -1;
		}	

		result = fclose(file); 
		if (result) {
			perror("file close failed 2"); 
			return -1;
		}

		for (int i = 0; i < tree->num_written; i ++) {
			if (key == disk_buffer[i].key) {
				disk_buffer[i] = disk_buffer[tree->num_written - 1];
				tree->num_written--;
				qsort(disk_buffer, tree->num_written, sizeof(node) * tree->num_written, comparison);

				file = fopen("disk.txt", "w");  
				result = fwrite(disk_buffer, sizeof(node), tree->num_written, file);
				if (!result) {
					perror("fwrite failed while writing to disk 1");
					return -1;	
				}

				result = fclose(file); 
				if (result) {
					perror("file close failed 2"); 
					return -1;
				}
				return 0;
			}
		}
	} 
	return -1;
}


///////////////////////////////////////////////////////////////////////////////
//                                LOAD                                       //
///////////////////////////////////////////////////////////////////////////////
int load(const char *filename, lsm_tree *tree) {
	int filelen; 
	int result; 

	FILE *file = fopen(filename, "rb");
	// what if file is NULL; 
	if (!file) {
		return -1;
	}
	fseek(file, 0, SEEK_END); 
	filelen = ftell(file);  
	rewind(file);   

	int *buffer = malloc((filelen + 1) * sizeof(int)); 
	if (!buffer) {
		perror("failed to malloc in load");
		return -1;
	}
	int num_ints = 0; 

	for (int i = 0; i < filelen; i++){
		result = fread(buffer + i, 1, 1, file);
		if(result == 0) {
			perror("read failed while loading");
			return -1;
		}

		num_ints++;
	}
	result = fclose(file);
	if (result) {
		perror("failed to close file in load");
		return -1;
	}

	for (int i = 0; i < num_ints; i += 2) {	
		put(buffer[i], buffer[i+1], tree);
	}
	return 0;
}


///////////////////////////////////////////////////////////////////////////////
//                                PRINT STAT                                 //
///////////////////////////////////////////////////////////////////////////////













